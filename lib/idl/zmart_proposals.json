{
  "address": "Ayh1AKtiNKg9DgLgpxn9t9B2KSjfvfH3sbpDdXBp1zv7",
  "metadata": {
    "name": "zmart_proposals",
    "version": "0.1.0",
    "spec": "0.1.0",
    "description": "ZMart Proposal System Program"
  },
  "instructions": [
    {
      "name": "approve_proposal",
      "docs": [
        "Manually approve a proposal (admin override)",
        "",
        "Allows admin to approve proposals without waiting for community voting.",
        "Useful for urgent markets or when community voting is insufficient."
      ],
      "discriminator": [
        136,
        108,
        102,
        85,
        98,
        114,
        7,
        147
      ],
      "accounts": [
        {
          "name": "authority",
          "docs": [
            "Program authority (validates admin)"
          ],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          "name": "proposal",
          "docs": [
            "Proposal being approved"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108
                ]
              },
              {
                "kind": "account",
                "path": "proposal.id",
                "account": "Proposal"
              }
            ]
          }
        },
        {
          "name": "admin",
          "docs": [
            "Admin signer (validated against authority.admin)"
          ],
          "writable": true,
          "signer": true
        }
      ],
      "args": []
    },
    {
      "name": "create_proposal",
      "docs": [
        "Create a new market proposal",
        "",
        "Anyone can submit a proposal for a new prediction market.",
        "Proposals start in Pending state and go through voting."
      ],
      "discriminator": [
        132,
        116,
        68,
        174,
        216,
        160,
        198,
        22
      ],
      "accounts": [
        {
          "name": "proposal",
          "docs": [
            "Proposal account (PDA derived from counter)"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108
                ]
              },
              {
                "kind": "account",
                "path": "proposal_counter.count",
                "account": "ProposalCounter"
              }
            ]
          }
        },
        {
          "name": "proposal_counter",
          "docs": [
            "Global proposal counter"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108,
                  95,
                  99,
                  111,
                  117,
                  110,
                  116,
                  101,
                  114
                ]
              }
            ]
          }
        },
        {
          "name": "proposer",
          "docs": [
            "User submitting the proposal"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "system_program",
          "docs": [
            "System program for account creation"
          ],
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "market_id",
          "type": "pubkey"
        },
        {
          "name": "question",
          "type": "string"
        },
        {
          "name": "end_time",
          "type": "i64"
        },
        {
          "name": "fee_config_id",
          "type": "u8"
        }
      ]
    },
    {
      "name": "execute_proposal",
      "docs": [
        "Execute an approved proposal (create market via CPI)",
        "",
        "Creates a prediction market on zmart-core by calling create_market via CPI.",
        "Only approved proposals can be executed by the proposer or admin."
      ],
      "discriminator": [
        186,
        60,
        116,
        133,
        108,
        128,
        111,
        28
      ],
      "accounts": [
        {
          "name": "authority",
          "docs": [
            "Program authority (validates admin if executor is admin)"
          ],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          "name": "proposal",
          "docs": [
            "Proposal being executed"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108
                ]
              },
              {
                "kind": "account",
                "path": "proposal.id",
                "account": "Proposal"
              }
            ]
          }
        },
        {
          "name": "market",
          "docs": [
            "Market PDA to be created on zmart-core"
          ],
          "writable": true
        },
        {
          "name": "executor",
          "docs": [
            "Executor (proposer or admin)"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "zmart_core_program",
          "docs": [
            "ZMart Core program for CPI"
          ]
        },
        {
          "name": "system_program",
          "docs": [
            "System program for market creation"
          ],
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": []
    },
    {
      "name": "initialize_authority",
      "docs": [
        "Initialize program authority (ONE-TIME SETUP)",
        "",
        "Creates the singleton Authority PDA with initial admin wallet.",
        "Must be called ONCE during program deployment."
      ],
      "discriminator": [
        13,
        186,
        25,
        16,
        218,
        31,
        90,
        1
      ],
      "accounts": [
        {
          "name": "authority",
          "docs": [
            "Authority PDA (created here)"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          "name": "initializer",
          "docs": [
            "Wallet paying for authority account creation"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "admin",
          "type": "pubkey"
        }
      ]
    },
    {
      "name": "initialize_counter",
      "docs": [
        "Initialize the proposal counter",
        "",
        "This must be called once before any proposals can be created.",
        "Creates a global counter account to track proposal IDs."
      ],
      "discriminator": [
        67,
        89,
        100,
        87,
        231,
        172,
        35,
        124
      ],
      "accounts": [
        {
          "name": "proposal_counter",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108,
                  95,
                  99,
                  111,
                  117,
                  110,
                  116,
                  101,
                  114
                ]
              }
            ]
          }
        },
        {
          "name": "admin",
          "writable": true,
          "signer": true
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": []
    },
    {
      "name": "reject_proposal",
      "docs": [
        "Manually reject a proposal (admin action)",
        "",
        "Allows admin to reject proposals that violate guidelines or are inappropriate."
      ],
      "discriminator": [
        114,
        162,
        164,
        82,
        191,
        11,
        102,
        25
      ],
      "accounts": [
        {
          "name": "authority",
          "docs": [
            "Program authority (validates admin)"
          ],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          "name": "proposal",
          "docs": [
            "Proposal being rejected"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108
                ]
              },
              {
                "kind": "account",
                "path": "proposal.id",
                "account": "Proposal"
              }
            ]
          }
        },
        {
          "name": "admin",
          "docs": [
            "Admin signer (validated against authority.admin)"
          ],
          "writable": true,
          "signer": true
        }
      ],
      "args": []
    },
    {
      "name": "transfer_authority",
      "docs": [
        "Transfer admin authority to new wallet",
        "",
        "Allows changing admin control (dev wallet → Vultisig → DAO).",
        "Only current admin can transfer."
      ],
      "discriminator": [
        48,
        169,
        76,
        72,
        229,
        180,
        55,
        161
      ],
      "accounts": [
        {
          "name": "authority",
          "docs": [
            "Program authority (being updated)"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          "name": "admin",
          "docs": [
            "Current admin (must sign to authorize transfer)"
          ],
          "writable": true,
          "signer": true
        }
      ],
      "args": [
        {
          "name": "new_admin",
          "type": "pubkey"
        }
      ]
    },
    {
      "name": "vote_proposal",
      "docs": [
        "Vote on a market proposal",
        "",
        "Users can upvote or downvote proposals. Each user can only vote once.",
        "Auto-approval triggers when net votes >= 50 OR (24h passed AND positive votes)."
      ],
      "discriminator": [
        247,
        104,
        114,
        240,
        237,
        41,
        200,
        36
      ],
      "accounts": [
        {
          "name": "proposal",
          "docs": [
            "Proposal being voted on"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108
                ]
              },
              {
                "kind": "account",
                "path": "proposal.id",
                "account": "Proposal"
              }
            ]
          }
        },
        {
          "name": "vote_record",
          "docs": [
            "Vote record to prevent double voting",
            "PDA: [VOTE_RECORD_SEED, proposal_id, voter]"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  118,
                  111,
                  116,
                  101,
                  95,
                  114,
                  101,
                  99,
                  111,
                  114,
                  100
                ]
              },
              {
                "kind": "account",
                "path": "proposal.id",
                "account": "Proposal"
              },
              {
                "kind": "account",
                "path": "voter"
              }
            ]
          }
        },
        {
          "name": "voter",
          "docs": [
            "User casting the vote"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "vote_type",
          "type": {
            "defined": {
              "name": "VoteType"
            }
          }
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "Authority",
      "discriminator": [
        36,
        108,
        254,
        18,
        167,
        144,
        27,
        36
      ]
    },
    {
      "name": "Proposal",
      "discriminator": [
        26,
        94,
        189,
        187,
        116,
        136,
        53,
        33
      ]
    },
    {
      "name": "ProposalCounter",
      "discriminator": [
        110,
        92,
        147,
        182,
        142,
        28,
        182,
        5
      ]
    },
    {
      "name": "VoteRecord",
      "discriminator": [
        112,
        9,
        123,
        165,
        234,
        9,
        157,
        167
      ]
    }
  ],
  "events": [
    {
      "name": "AuthorityInitialized",
      "discriminator": [
        33,
        253,
        110,
        175,
        141,
        60,
        170,
        158
      ]
    },
    {
      "name": "AuthorityTransferred",
      "discriminator": [
        245,
        109,
        179,
        54,
        135,
        92,
        22,
        64
      ]
    },
    {
      "name": "ProposalApprovedByAdmin",
      "discriminator": [
        117,
        253,
        194,
        196,
        98,
        42,
        189,
        78
      ]
    },
    {
      "name": "ProposalExecuted",
      "discriminator": [
        92,
        213,
        189,
        201,
        101,
        83,
        111,
        83
      ]
    },
    {
      "name": "ProposalRejectedByAdmin",
      "discriminator": [
        63,
        68,
        195,
        28,
        198,
        247,
        186,
        37
      ]
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "EmptyQuestion",
      "msg": "Proposal question cannot be empty"
    },
    {
      "code": 6001,
      "name": "QuestionTooLong",
      "msg": "Proposal question is too long (max 500 characters)"
    },
    {
      "code": 6002,
      "name": "InvalidEndTime",
      "msg": "Market end time must be in the future"
    },
    {
      "code": 6003,
      "name": "EndTimeTooFar",
      "msg": "Market end time is too far in the future (max 1 year)"
    },
    {
      "code": 6004,
      "name": "InvalidFeeConfigId",
      "msg": "Invalid fee configuration ID (must be 1-3)"
    },
    {
      "code": 6005,
      "name": "MarketIdInUse",
      "msg": "Market ID is already in use"
    },
    {
      "code": 6006,
      "name": "ProposalNotPending",
      "msg": "Proposal is not in pending state"
    },
    {
      "code": 6007,
      "name": "AlreadyVoted",
      "msg": "User has already voted on this proposal"
    },
    {
      "code": 6008,
      "name": "CannotVoteOwnProposal",
      "msg": "Cannot vote on your own proposal"
    },
    {
      "code": 6009,
      "name": "ProposalExpired",
      "msg": "Proposal has expired and can no longer be voted on"
    },
    {
      "code": 6010,
      "name": "Unauthorized",
      "msg": "Only admin can perform this action"
    },
    {
      "code": 6011,
      "name": "ProposalNotApproved",
      "msg": "Proposal is not approved"
    },
    {
      "code": 6012,
      "name": "ProposalAlreadyApproved",
      "msg": "Proposal is already approved"
    },
    {
      "code": 6013,
      "name": "ProposalAlreadyRejected",
      "msg": "Proposal is already rejected"
    },
    {
      "code": 6014,
      "name": "ProposalFinalized",
      "msg": "Cannot modify a finalized proposal"
    },
    {
      "code": 6015,
      "name": "MarketAlreadyCreated",
      "msg": "Market has already been created for this proposal"
    },
    {
      "code": 6016,
      "name": "CpiFailure",
      "msg": "Failed to create market via cross-program call"
    },
    {
      "code": 6017,
      "name": "InvalidExecutor",
      "msg": "Only proposer or admin can execute approved proposal"
    },
    {
      "code": 6018,
      "name": "MathOverflow",
      "msg": "Arithmetic overflow"
    },
    {
      "code": 6019,
      "name": "MathUnderflow",
      "msg": "Arithmetic underflow"
    },
    {
      "code": 6020,
      "name": "InvalidStatusTransition",
      "msg": "Invalid proposal status transition"
    },
    {
      "code": 6021,
      "name": "InvalidTimestamp",
      "msg": "Invalid timestamp"
    },
    {
      "code": 6022,
      "name": "InvalidAccount",
      "msg": "Invalid account provided"
    },
    {
      "code": 6023,
      "name": "InvalidPda",
      "msg": "PDA derivation failed"
    },
    {
      "code": 6024,
      "name": "InvalidInput",
      "msg": "Invalid input parameter"
    },
    {
      "code": 6025,
      "name": "CounterNotInitialized",
      "msg": "Proposal counter not initialized"
    },
    {
      "code": 6026,
      "name": "CounterOverflow",
      "msg": "Proposal counter overflow - too many proposals"
    }
  ],
  "types": [
    {
      "name": "Authority",
      "docs": [
        "Program authority configuration",
        "",
        "Singleton PDA that stores the admin wallet address.",
        "Can be transferred for wallet updates or DAO transitions."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "admin",
            "docs": [
              "Admin wallet address",
              "Initially set to deployer's wallet, can be transferred to:",
              "- Vultisig wallet (for secure operations)",
              "- DAO governance PDA (for community control)",
              "- Multisig address (for shared control)"
            ],
            "type": "pubkey"
          },
          {
            "name": "created_at",
            "docs": [
              "Unix timestamp when authority was initialized"
            ],
            "type": "i64"
          },
          {
            "name": "updated_at",
            "docs": [
              "Unix timestamp when authority was last updated (transferred)"
            ],
            "type": "i64"
          },
          {
            "name": "bump",
            "docs": [
              "PDA bump seed"
            ],
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "AuthorityInitialized",
      "docs": [
        "Event emitted when authority is initialized"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "docs": [
              "Authority PDA address"
            ],
            "type": "pubkey"
          },
          {
            "name": "admin",
            "docs": [
              "Initial admin wallet"
            ],
            "type": "pubkey"
          },
          {
            "name": "initialized_by",
            "docs": [
              "Wallet that initialized authority"
            ],
            "type": "pubkey"
          },
          {
            "name": "timestamp",
            "docs": [
              "Unix timestamp"
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "AuthorityTransferred",
      "docs": [
        "Event emitted when authority is transferred"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "old_admin",
            "docs": [
              "Previous admin"
            ],
            "type": "pubkey"
          },
          {
            "name": "new_admin",
            "docs": [
              "New admin"
            ],
            "type": "pubkey"
          },
          {
            "name": "timestamp",
            "docs": [
              "Unix timestamp"
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "Proposal",
      "docs": [
        "Proposal for creating a new prediction market",
        "",
        "Proposals go through community voting before being approved.",
        "Auto-approval occurs when:",
        "1. Net votes (upvotes - downvotes) >= 50, OR",
        "2. 24+ hours passed AND upvotes > downvotes"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "id",
            "docs": [
              "Unique proposal ID (counter-based)"
            ],
            "type": "u64"
          },
          {
            "name": "market_id",
            "docs": [
              "Market ID for the proposed market"
            ],
            "type": "pubkey"
          },
          {
            "name": "proposer",
            "docs": [
              "Wallet that submitted this proposal"
            ],
            "type": "pubkey"
          },
          {
            "name": "question",
            "docs": [
              "Market question (1-500 characters)"
            ],
            "type": "string"
          },
          {
            "name": "end_time",
            "docs": [
              "Unix timestamp when market should end"
            ],
            "type": "i64"
          },
          {
            "name": "fee_config_id",
            "docs": [
              "Fee configuration tier (1-3)"
            ],
            "type": "u8"
          },
          {
            "name": "upvotes",
            "docs": [
              "Number of upvotes received"
            ],
            "type": "u32"
          },
          {
            "name": "downvotes",
            "docs": [
              "Number of downvotes received"
            ],
            "type": "u32"
          },
          {
            "name": "status",
            "docs": [
              "Current status of the proposal"
            ],
            "type": {
              "defined": {
                "name": "ProposalStatus"
              }
            }
          },
          {
            "name": "created_at",
            "docs": [
              "Unix timestamp when proposal was created"
            ],
            "type": "i64"
          },
          {
            "name": "approved_at",
            "docs": [
              "Unix timestamp when proposal was approved (if applicable)"
            ],
            "type": {
              "option": "i64"
            }
          },
          {
            "name": "approved_by",
            "docs": [
              "Admin who approved this proposal (if manual approval)"
            ],
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "market_executed",
            "docs": [
              "Whether the market has been created (executed)"
            ],
            "type": "bool"
          },
          {
            "name": "bump",
            "docs": [
              "PDA bump seed"
            ],
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "ProposalApprovedByAdmin",
      "docs": [
        "Event emitted when proposal is manually approved by admin"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "proposal",
            "docs": [
              "Proposal account address"
            ],
            "type": "pubkey"
          },
          {
            "name": "proposal_id",
            "docs": [
              "Proposal ID"
            ],
            "type": "u64"
          },
          {
            "name": "admin",
            "docs": [
              "Admin who approved"
            ],
            "type": "pubkey"
          },
          {
            "name": "timestamp",
            "docs": [
              "Unix timestamp"
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "ProposalCounter",
      "docs": [
        "Global counter for proposal IDs",
        "",
        "Simple incrementing counter to ensure unique proposal IDs"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "count",
            "docs": [
              "Current count (next proposal will use this value)"
            ],
            "type": "u64"
          },
          {
            "name": "bump",
            "docs": [
              "PDA bump seed"
            ],
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "ProposalExecuted",
      "docs": [
        "Event emitted when proposal is executed"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "proposal",
            "docs": [
              "Proposal account address"
            ],
            "type": "pubkey"
          },
          {
            "name": "proposal_id",
            "docs": [
              "Proposal ID"
            ],
            "type": "u64"
          },
          {
            "name": "market",
            "docs": [
              "Market account created"
            ],
            "type": "pubkey"
          },
          {
            "name": "executor",
            "docs": [
              "Executor wallet (proposer or admin)"
            ],
            "type": "pubkey"
          },
          {
            "name": "timestamp",
            "docs": [
              "Unix timestamp"
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "ProposalRejectedByAdmin",
      "docs": [
        "Event emitted when proposal is rejected by admin"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "proposal",
            "docs": [
              "Proposal account address"
            ],
            "type": "pubkey"
          },
          {
            "name": "proposal_id",
            "docs": [
              "Proposal ID"
            ],
            "type": "u64"
          },
          {
            "name": "admin",
            "docs": [
              "Admin who rejected"
            ],
            "type": "pubkey"
          },
          {
            "name": "timestamp",
            "docs": [
              "Unix timestamp"
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "ProposalStatus",
      "docs": [
        "Status of a proposal"
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Pending"
          },
          {
            "name": "Approved"
          },
          {
            "name": "Rejected"
          },
          {
            "name": "Expired"
          }
        ]
      }
    },
    {
      "name": "VoteRecord",
      "docs": [
        "Record of a user's vote on a proposal",
        "",
        "Prevents double voting - one vote per user per proposal"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "proposal",
            "docs": [
              "Proposal this vote is for"
            ],
            "type": "pubkey"
          },
          {
            "name": "voter",
            "docs": [
              "User who voted"
            ],
            "type": "pubkey"
          },
          {
            "name": "vote_type",
            "docs": [
              "Type of vote (upvote or downvote)"
            ],
            "type": {
              "defined": {
                "name": "VoteType"
              }
            }
          },
          {
            "name": "timestamp",
            "docs": [
              "Unix timestamp when vote was cast"
            ],
            "type": "i64"
          },
          {
            "name": "bump",
            "docs": [
              "PDA bump seed"
            ],
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "VoteType",
      "docs": [
        "Type of vote on a proposal"
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Upvote"
          },
          {
            "name": "Downvote"
          }
        ]
      }
    }
  ]
}